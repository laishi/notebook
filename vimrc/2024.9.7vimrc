" 设置 Leader 键为逗号
let mapleader = ";"

" 自动重新加载 vimrc 文件
autocmd! bufwritepost $MYVIMRC source $MYVIMRC

" 加载颜色设置
source ~/.vim/color/hi.vim

" 基本设置
filetype on
set relativenumber
set number
set clipboard=unnamed
set showcmd
set hlsearch
set incsearch
set splitright
set wildmode=longest,list,full
set wildmenu
set autoindent
set cindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set ttymouse=xterm2

" Leader 键映射
nnoremap <Leader>n :set relativenumber! number!<CR>

" 移动行
nnoremap <A-Down> :m .+1<CR>==
nnoremap <A-Up> :m .-2<CR>==
inoremap <A-Down> <Esc>:m .+1<CR>==gi
inoremap <A-Up> <Esc>:m .-2<CR>==gi
vnoremap <A-Down> :m '>+1<CR>gv=gv
vnoremap <A-Up> :m '<-2<CR>gv=gv

" 剪贴板
nnoremap <silent> <leader>c :silent %w !xclip -selection clipboard<CR>
vnoremap <silent> <leader>c :silent w !xclip -selection clipboard<CR>

" LSP 格式化
nnoremap <leader>[ :LspDocumentFormat<CR>
inoremap <leader>[ <Esc>:LspDocumentFormat<CR>
vnoremap <leader>[ <Esc>:LspDocumentFormat<CR>

" 自动修复格式化
function! Reline()
    let cursor_pos = winsaveview()
    execute 'g/^$/d'
    execute 'g/^}$/normal! 1o'
    normal! gg=G
    call winrestview(cursor_pos)
endfunction
nnoremap <leader>] :call Reline()<CR>

" 插件管理
call plug#begin()
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'thomasfaingnaert/vim-lsp-ultisnips'
Plug 'thomasfaingnaert/vim-lsp-snippets'
Plug 'voldikss/vim-floaterm'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'preservim/tagbar'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'tomasiser/vim-code-dark'
call plug#end()

" Lightline 配置
let g:lightline = {'colorscheme': 'catppuccin_mocha'}

" LSP 设置
let g:lsp_diagnostics_enabled = 0
let g:lsp_document_highlight_enabled = 1
highlight lspReference ctermfg=red guifg=red ctermbg=black guibg=black

" Tagbar 切换
nmap <Leader>t :w<CR>:TagbarToggle<CR>

" Completor 配置
map <tab> <Plug>CompletorCppJumpToPlaceholder
imap <tab> <Plug>CompletorCppJumpToPlaceholder
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" UltiSnips 配置
let g:UltiSnipsExpandTrigger="<CR>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

" 自动补全设置
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Floaterm 配置
let g:floaterm_borderchars = get(g:, 'floaterm_borderchars', '─│─│╭╮╯╰')
let g:floaterm_titleposition='center'
hi FloatermBorder guibg=orange guifg=cyan

" Floaterm 快捷键
nnoremap <silent>` :w<CR>:FloatermNew<CR>
tnoremap <silent>` <C-c><C-\><C-n>:FloatermKill<CR>

function! CompileRun()
    let l:cmd = ''
    if &filetype ==# 'c'
        let l:cmd = 'gcc % -o %< && ./%<'
    elseif &filetype ==# 'rust'
        let l:cmd = 'rustc % && ./%<'
    elseif &filetype ==# 'python'
        let l:cmd = 'python3 %'
    elseif &filetype ==# 'javascript'
        let l:cmd = 'node %'
    endif

    if l:cmd != ''
        execute 'w'
        execute 'FloatermNew! ' . l:cmd
    endif
endfunction

" 通过文件类型设置映射
autocmd FileType c,python,javascript,rust nnoremap <silent>` :call CompileRun()<CR>

